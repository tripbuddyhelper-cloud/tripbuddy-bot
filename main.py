import os
import logging
from flask import Flask, request
import requests
import telebot
from telebot import types

# –õ–æ–≥–∏ TeleBot –≤ DEBUG
telebot.logger.setLevel(logging.DEBUG)

BOT_TOKEN = os.environ["BOT_TOKEN"]
PUBLIC_URL = os.environ.get("PUBLIC_URL", "").rstrip("/")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
app = Flask(__name__)

# -------- Bot handlers --------
@bot.message_handler(commands=["start", "help"])
def on_start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –∂–∏–≤–æ–π ü§ñ. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî —è –ø–æ–≤—Ç–æ—Ä—é.")

@bot.message_handler(func=lambda m: True)
def echo_all(message):
    bot.send_message(message.chat.id, f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {message.text}")

# -------- Healthcheck --------
@app.route("/", methods=["GET"], strict_slashes=False)
def root():
    return "OK", 200

# --- Webhook –æ—Å–Ω–æ–≤–Ω–æ–π (–∏ /webhook –∏ /webhook/ –ø—Ä–∏–Ω–∏–º–∞–µ–º)
@app.route("/webhook", methods=["GET", "POST"], strict_slashes=False)
def webhook():
    if request.method == "GET":
        return "Webhook here", 200

    ct = request.headers.get("content-type", "")
    if "application/json" not in ct.lower():
        print("Unexpected Content-Type:", ct)
        return "OK", 200

    try:
        json_str = request.get_data(as_text=True)
        print("Incoming update:", json_str[:1000])
        update = types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        print("webhook error:", e)
        return "OK", 200

# --- –ê–ª–∏–∞—Å—ã –ø–æ–¥ —Ä–µ–¥–∏—Ä–µ–∫—Ç Replit: /@<owner>/<project>/webhook –∏ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
@app.route("/@<owner>/<project>/webhook", methods=["GET", "POST"], strict_slashes=False)
def webhook_alias(owner, project):
    return webhook()

@app.route("/@<owner>/<project>/", methods=["GET"], strict_slashes=False)
def project_root(owner, project):
    return root()

def ensure_webhook():
    if not PUBLIC_URL:
        print("PUBLIC_URL –ø—É—Å—Ç–æ–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é setWebhook")
        return
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        data = {"url": f"{PUBLIC_URL}/webhook"}
        r = requests.post(url, data=data, timeout=10)
        print("setWebhook:", r.json())
    except Exception as e:
        print("setWebhook error:", e)

if __name__ == "__main__":
    ensure_webhook()
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)



# ============ ENV ============
BOT_TOKEN      = os.getenv("BOT_TOKEN")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "").strip()  # –ø—Ä–∏–º–µ—Ä: "@yourusername"
_admin_raw     = os.getenv("ADMIN_GROUP_ID", "").strip()

try:
    ADMIN_GROUP_ID_INT = int(_admin_raw) if _admin_raw else None
except ValueError:
    ADMIN_GROUP_ID_INT = None

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ—Ç BOT_TOKEN –≤ Secrets.")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# ============ –ü–ª–∞—Ç—ë–∂–Ω—ã–π —à–∞–±–ª–æ–Ω ============
PAYMENT_INSTRUCTIONS = (
    "<b>–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ TripBuddy</b>\n"
    "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total} {currency}</b>\n"
    "–°–æ—Å—Ç–∞–≤: –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {base} + —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä {fee}\n"
    "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É, –ù–î–° –Ω–µ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è\n\n"
    "<b>–†–§ (–¢-–ë–∞–Ω–∫)</b>\n"
    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –≠–ª—å–¥—è–µ–≤–∞ –Æ–ª–∏—è –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞\n"
    "–°—á—ë—Ç: 40817810600139601690\n"
    "–ë–ò–ö: 044525974\n"
    "–ò–ù–ù: 7710140679   –ö–ü–ü: 771301001\n\n"
    "<i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –≤ –±–æ—Ç–µ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é.</i>"
)

# ============ SQLite ============
DB_PATH = "tripbuddy.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
conn.row_factory = sqlite3.Row

def _exec(sql, params=None):
    cur = conn.cursor()
    cur.execute(sql, params or [])
    conn.commit()
    return cur

def table_info(name: str):
    cur = _exec(f"PRAGMA table_info({name})")
    return [dict(row) for row in cur.fetchall()]

def has_table(name: str):
    cur = _exec(
        "SELECT name FROM sqlite_master WHERE type='table' AND name=?",
        (name,)
    )
    return cur.fetchone() is not None

def ensure_tables():
    # requests
    _exec("""
    CREATE TABLE IF NOT EXISTS requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        type TEXT,
        route TEXT,
        dates TEXT,
        guests TEXT,
        rooms TEXT,
        stars TEXT,
        breakfast TEXT,
        location_pref TEXT,
        budget TEXT,
        class TEXT,
        baggage TEXT,
        carriers TEXT,
        fullname TEXT,
        dob TEXT,
        gender TEXT,
        citizenship TEXT,
        passport_no TEXT,
        passport_exp TEXT,
        contact TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP
    )
    """)
    # request_attachments
    _exec("""
    CREATE TABLE IF NOT EXISTS request_attachments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        request_id INTEGER,
        kind TEXT,          -- 'photo' | 'doc'
        file_id TEXT
    )
    """)
    # payments
    _exec("""
    CREATE TABLE IF NOT EXISTS payments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        amount TEXT,
        currency TEXT,
        pay_method TEXT,
        pay_date TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP
    )
    """)
    # payment_files
    _exec("""
    CREATE TABLE IF NOT EXISTS payment_files (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        payment_id INTEGER,
        kind TEXT,          -- 'photo' | 'doc'
        file_id TEXT
    )
    """)

def add_missing_columns():
    # requests ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ä–∞—è)
    must_requests = {
        "chat_id":"INTEGER", "type":"TEXT", "route":"TEXT", "dates":"TEXT",
        "guests":"TEXT", "rooms":"TEXT", "stars":"TEXT", "breakfast":"TEXT",
        "location_pref":"TEXT", "budget":"TEXT", "class":"TEXT", "baggage":"TEXT",
        "carriers":"TEXT", "fullname":"TEXT", "dob":"TEXT", "gender":"TEXT",
        "citizenship":"TEXT", "passport_no":"TEXT", "passport_exp":"TEXT",
        "contact":"TEXT", "created_at":"TEXT"
    }
    if has_table("requests"):
        cols = {c["name"] for c in table_info("requests")}
        for name, typ in must_requests.items():
            if name not in cols:
                _exec(f"ALTER TABLE requests ADD COLUMN {name} {typ}")

    # payments ‚Äî –¥–æ–±–∞–≤–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è (–≤–æ—Ç —Ç—É—Ç –æ–±—ã—á–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞)
    must_payments = {
        "chat_id":"INTEGER", "amount":"TEXT", "currency":"TEXT",
        "pay_method":"TEXT", "pay_date":"TEXT", "created_at":"TEXT"
    }
    if has_table("payments"):
        cols = {c["name"] for c in table_info("payments")}
        for name, typ in must_payments.items():
            if name not in cols:
                _exec(f"ALTER TABLE payments ADD COLUMN {name} {typ}")

    # request_attachments
    must_req_att = {"request_id":"INTEGER", "kind":"TEXT", "file_id":"TEXT"}
    if has_table("request_attachments"):
        cols = {c["name"] for c in table_info("request_attachments")}
        for name, typ in must_req_att.items():
            if name not in cols:
                _exec(f"ALTER TABLE request_attachments ADD COLUMN {name} {typ}")

    # payment_files
    must_pay_files = {"payment_id":"INTEGER", "kind":"TEXT", "file_id":"TEXT"}
    if has_table("payment_files"):
        cols = {c["name"] for c in table_info("payment_files")}
        for name, typ in must_pay_files.items():
            if name not in cols:
                _exec(f"ALTER TABLE payment_files ADD COLUMN {name} {typ}")

def init_db():
    ensure_tables()
    add_missing_columns()

init_db()

# ============ FSM (–≤ –ø–∞–º—è—Ç–∏) ============
user_step = {}   # chat_id -> step
user_data = {}   # chat_id -> dict

def reset_flow(cid):
    user_step.pop(cid, None)
    user_data.pop(cid, None)

# ============ –£—Ç–∏–ª–∏—Ç—ã ============


def parse_amount_currency(raw: str):
    # "60000 RUB" | "70,5 USD" | "1000" -> ('60000','RUB') etc.
    if not raw:
        return ("", "")
    m = re.search(r"([\d\s.,]+)\s*([A-Za-z–ê-–Ø–∞-—è]{3})?", raw.strip())
    if not m:
        return (raw.strip(), "")
    amount = m.group(1).replace(" ", "")
    cur = (m.group(2) or "").upper()
    if cur == "–†–£–ë": cur = "RUB"
    return (amount, cur)

def to_num(amount_str: str) -> float:
    try:
        return float(amount_str.replace(",", "."))
    except Exception:
        return 0.0

# ============ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ============
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)")
    kb.add("üìÑ –û—Ñ–µ—Ä—Ç–∞", "üí¨ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    return kb

def type_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("üè® –û—Ç–µ–ª—å", "‚úàÔ∏è –ë–∏–ª–µ—Ç—ã")
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return kb

def cancel_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return kb

def yes_no_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå")
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return kb

def class_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–≠–∫–æ–Ω–æ–º", "–ü—Ä–µ–º–∏—É–º-—ç–∫–æ–Ω–æ–º")
    kb.add("–ë–∏–∑–Ω–µ—Å", "–ü–µ—Ä–≤—ã–π")
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return kb

def rooms_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("1 –∫–æ–º–Ω–∞—Ç–∞", "2 –∫–æ–º–Ω–∞—Ç—ã", "3+ –∫–æ–º–Ω–∞—Ç")
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return kb

def stars_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("‚≠êÔ∏è", "‚≠êÔ∏è‚≠êÔ∏è", "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è")
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return kb

def gender_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–ú", "–ñ")
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return kb

def attachments_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", "–ì–æ—Ç–æ–≤–æ ‚úÖ")
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return kb

def pay_finish_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ")
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return kb

# ============ –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ ============
@bot.message_handler(commands=['start'])
def start_command(message: types.Message):
    reset_flow(message.chat.id)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ <b>TripBuddy</b> ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º ‚úàÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['groupid'])
def send_group_id(message: types.Message):
    bot.send_message(message.chat.id, f"ID —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏: {message.chat.id}")

@bot.message_handler(commands=['admin_debug'])
def admin_debug(message: types.Message):
    bot.send_message(
        message.chat.id,
        f"–≠—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ chat_id: {message.chat.id}\n"
        f"ADMIN_GROUP_ID_INT: {ADMIN_GROUP_ID_INT}\n"
        f"ADMIN_USERNAME: {ADMIN_USERNAME or '‚Äî'}\n"
        f"Group Privacy –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Disabled –≤ BotFather."
    )

@bot.message_handler(func=lambda m: m.text in ["üìÑ –û—Ñ–µ—Ä—Ç–∞", "/offer"])
def send_offer(message: types.Message):
    pdf_path = "public_offer_tripbuddy.pdf"
    if os.path.exists(pdf_path):
        with open(pdf_path, "rb") as f:
            bot.send_document(message.chat.id, f, visible_file_name="TripBuddy_Offer.pdf")
        bot.send_message(message.chat.id, "–û–ø–ª–∞—á–∏–≤–∞—è —É—Å–ª—É–≥—É, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã.")
    else:
        bot.send_message(message.chat.id, "–ù–µ –Ω–∞—à–ª–∞ —Ñ–∞–π–ª –æ—Ñ–µ—Ä—Ç—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ <b>public_offer_tripbuddy.pdf</b> –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞.")

@bot.message_handler(func=lambda m: m.text == "üí¨ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
def admin_flow(message: types.Message):
    who = ADMIN_USERNAME or "‚Äî"
    bot.send_message(message.chat.id, f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {who}\n–û—Ç–≤–µ—Ç–∏–º –±—ã—Å—Ç—Ä–æ üôÇ")

@bot.message_handler(commands=['cancel'])
@bot.message_handler(func=lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def cancel_flow(message: types.Message):
    reset_flow(message.chat.id)
    bot.send_message(message.chat.id, "–û–∫–µ–π, –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞. –ß–µ–º –µ—â—ë –ø–æ–º–æ—á—å?", reply_markup=main_menu())

# ============ –ü–†–ò–Å–ú –í–õ–û–ñ–ï–ù–ò–ô (–æ–±—â–∏–π) ============
@bot.message_handler(content_types=['photo', 'document'])
def handle_any_attachments(message: types.Message):
    step = user_step.get(message.chat.id)
    if step is None:
        return  # –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Äî –∏–≥–Ω–æ—Ä
    data = user_data.setdefault(message.chat.id, {})
    bucket = "attachments" if not str(step).startswith("pay_") else "pay_attachments"
    data.setdefault(bucket, [])
    if message.photo:
        data[bucket].append(("photo", message.photo[-1].file_id))
        bot.send_message(message.chat.id, "üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ")
    elif message.document:
        data[bucket].append(("doc", message.document.file_id))
        bot.send_message(message.chat.id, "üìé –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç ‚úÖ")

# ============ –ó–ê–Ø–í–ö–ê ============
@bot.message_handler(func=lambda m: m.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
def request_start(message: types.Message):
    reset_flow(message.chat.id)
    user_data[message.chat.id] = {"attachments": []}
    user_step[message.chat.id] = "type"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞—è–≤–∫–∏? –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:", reply_markup=type_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "type")
def step_type(message: types.Message):
    t = (message.text or "").strip()
    if t not in ["üè® –û—Ç–µ–ª—å", "‚úàÔ∏è –ë–∏–ª–µ—Ç—ã", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        return bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=type_menu())
    if t == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["type"] = "–û—Ç–µ–ª—å" if "–û—Ç–µ–ª—å" in t else "–ë–∏–ª–µ—Ç—ã"
    user_step[message.chat.id] = "route"
    prompt = "üèôÔ∏è –ì–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:" if user_data[message.chat.id]["type"] == "–û—Ç–µ–ª—å" else "üõ´ –ú–∞—Ä—à—Ä—É—Ç (–æ—Ç–∫—É–¥–∞ ‚Üí –∫—É–¥–∞):"
    bot.send_message(message.chat.id, prompt, reply_markup=cancel_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "route")
def step_route(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["route"] = message.text.strip()
    user_step[message.chat.id] = "dates"
    bot.send_message(message.chat.id, "üóìÔ∏è –î–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 01.09‚Äì07.09 –∏–ª–∏ ¬´–≥–∏–±–∫–æ ¬±2 –¥–Ω—è¬ª):", reply_markup=cancel_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "dates")
def step_dates(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["dates"] = message.text.strip()
    if user_data[message.chat.id]["type"] == "–û—Ç–µ–ª—å":
        user_step[message.chat.id] = "guests"
        bot.send_message(message.chat.id, "üë• –ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π –∏ –¥–µ—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´2 –≤–∑—Ä–æ—Å–ª—ã—Ö, 1 —Ä–µ–±—ë–Ω–æ–∫ 5 –ª–µ—Ç¬ª):", reply_markup=cancel_menu())
    else:
        user_step[message.chat.id] = "class"
        bot.send_message(message.chat.id, "ü™ë –ö–ª–∞—Å—Å –ø–µ—Ä–µ–ª—ë—Ç–∞:", reply_markup=class_menu())

# --- –û—Ç–µ–ª—å ---
@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "guests")
def step_guests(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["guests"] = message.text.strip()
    user_step[message.chat.id] = "rooms"
    bot.send_message(message.chat.id, "üõèÔ∏è –ù—É–∂–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç:", reply_markup=rooms_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "rooms")
def step_rooms(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["rooms"] = message.text.strip()
    user_step[message.chat.id] = "stars"
    bot.send_message(message.chat.id, "‚≠êÔ∏è –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∑–≤—ë–∑–¥–Ω–æ—Å—Ç—å:", reply_markup=stars_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "stars")
def step_stars(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["stars"] = message.text.strip()
    user_step[message.chat.id] = "breakfast"
    bot.send_message(message.chat.id, "üç≥ –ù—É–∂–µ–Ω –ª–∏ –∑–∞–≤—Ç—Ä–∞–∫?", reply_markup=yes_no_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "breakfast")
def step_breakfast(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["breakfast"] = message.text.strip()
    user_step[message.chat.id] = "location_pref"
    bot.send_message(message.chat.id, "üìç –ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é (—Ü–µ–Ω—Ç—Ä, —É –º–æ—Ä—è, —Ä–∞–π–æ–Ω):", reply_markup=cancel_menu())

# --- –ë–∏–ª–µ—Ç—ã ---
@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "class")
def step_class(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["class"] = message.text.strip()
    user_step[message.chat.id] = "baggage"
    bot.send_message(message.chat.id, "üß≥ –ù—É–∂–µ–Ω –±–∞–≥–∞–∂?", reply_markup=yes_no_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "baggage")
def step_baggage(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["baggage"] = message.text.strip()
    user_step[message.chat.id] = "carriers"
    bot.send_message(message.chat.id, "‚úàÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=cancel_menu())

# --- –û–±—â–∏–µ —à–∞–≥–∏ ---
@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "location_pref")
def step_location_pref(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["location_pref"] = message.text.strip()
    user_step[message.chat.id] = "budget"
    bot.send_message(message.chat.id, "üí∞ –ë—é–¥–∂–µ—Ç (–∑–∞ –Ω–æ—á—å / –æ–±—â–∏–π):", reply_markup=cancel_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "carriers")
def step_carriers(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["carriers"] = message.text.strip()
    user_step[message.chat.id] = "budget"
    bot.send_message(message.chat.id, "üí∞ –ë—é–¥–∂–µ—Ç –Ω–∞ –ø–µ—Ä–µ–ª—ë—Ç:", reply_markup=cancel_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "budget")
def step_budget(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["budget"] = message.text.strip()
    user_step[message.chat.id] = "contact"
    bot.send_message(message.chat.id, "üìû –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è? (—Ç–µ–ª–µ–≥—Ä–∞–º @–Ω–∏–∫ –∏–ª–∏ –Ω–æ–º–µ—Ä):", reply_markup=cancel_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "contact")
def step_contact(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["contact"] = message.text.strip()
    user_step[message.chat.id] = "fullname"
    bot.send_message(message.chat.id, "ü™™ –§–ò–û –ª–∞—Ç–∏–Ω–∏—Ü–µ–π (–∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ):", reply_markup=cancel_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "fullname")
def step_fullname(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["fullname"] = message.text.strip()
    user_step[message.chat.id] = "dob"
    bot.send_message(message.chat.id, "üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=cancel_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "dob")
def step_dob(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["dob"] = message.text.strip()
    if user_data[message.chat.id]["type"] == "–ë–∏–ª–µ—Ç—ã":
        user_step[message.chat.id] = "gender"
        bot.send_message(message.chat.id, "üë§ –ü–æ–ª:", reply_markup=gender_menu())
    else:
        user_step[message.chat.id] = "citizenship"
        bot.send_message(message.chat.id, "üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:", reply_markup=cancel_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "gender")
def step_gender(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["gender"] = message.text.strip()
    user_step[message.chat.id] = "citizenship"
    bot.send_message(message.chat.id, "üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:", reply_markup=cancel_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "citizenship")
def step_citizenship(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["citizenship"] = message.text.strip()
    user_step[message.chat.id] = "passport_no"
    bot.send_message(message.chat.id, "üî¢ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:", reply_markup=cancel_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "passport_no")
def step_passport_no(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["passport_no"] = message.text.strip()
    user_step[message.chat.id] = "passport_exp"
    bot.send_message(message.chat.id, "üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=cancel_menu())

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "passport_exp")
def step_passport_exp(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞": return cancel_flow(message)
    user_data[message.chat.id]["passport_exp"] = message.text.strip()
    user_step[message.chat.id] = "attachments"
    bot.send_message(
        message.chat.id,
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã/–¥–æ–∫—É–º–µ–Ω—Ç—ã (–ø–∞—Å–ø–æ—Ä—Ç, –ø—Ä–∏–º–µ—Ä—ã –±–∏–ª–µ—Ç–æ–≤/–æ—Ç–µ–ª–µ–π) ‚Äî –ø–æ –æ–¥–Ω–æ–º—É –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ì–æ—Ç–æ–≤–æ ‚úÖ¬ª</b> –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è¬ª.",
        reply_markup=attachments_menu()
    )

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "attachments")
def finish_attachments(message: types.Message):
    t = (message.text or "").strip()

    # üîπ –ê–Ω—Ç–∏-–¥—É–±–ª–∏: –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —ç—Ç—É –∑–∞—è–≤–∫—É ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä
    if user_data.get(message.chat.id, {}).get("submitted_request"):
        return bot.send_message(
            message.chat.id,
            "–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ",
            reply_markup=main_menu()
        )

    if t == "‚ùå –û—Ç–º–µ–Ω–∞":
        return cancel_flow(message)
    if t not in ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", "–ì–æ—Ç–æ–≤–æ ‚úÖ"]:
        return bot.send_message(
            message.chat.id,
            "–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª(—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ ‚úÖ¬ª / ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è¬ª.",
            reply_markup=attachments_menu()
        )

    cid = message.chat.id
    d = user_data.get(cid, {})
    username = f"@{message.from_user.username}" if message.from_user.username else "‚Äî"

    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ –ë–î
    cur = _exec("""
        INSERT INTO requests
        (chat_id, type, route, dates, guests, rooms, stars, breakfast, location_pref, budget,
         class, baggage, carriers, fullname, dob, gender, citizenship, passport_no, passport_exp, contact)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        cid,
        d.get("type"),
        d.get("route"),
        d.get("dates"),
        d.get("guests"),
        d.get("rooms"),
        d.get("stars"),
        d.get("breakfast"),
        d.get("location_pref"),
        d.get("budget"),
        d.get("class"),
        d.get("baggage"),
        d.get("carriers"),
        d.get("fullname"),
        d.get("dob"),
        d.get("gender"),
        d.get("citizenship"),
        d.get("passport_no"),
        d.get("passport_exp"),
        d.get("contact"),
    ))
    request_id = cur.lastrowid

    # attachments -> request_attachments
    for kind, fid in d.get("attachments", []):
        _exec(
            "INSERT INTO request_attachments (request_id, kind, file_id) VALUES (?, ?, ?)",
            (request_id, kind, fid)
        )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
    if d.get("type") == "–û—Ç–µ–ª—å":
        body = (
            "<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ TripBuddy</b> üè®\n"
            f"–ì–æ—Ä–æ–¥: {d.get('route','‚Äî')}\n"
            f"–î–∞—Ç—ã: {d.get('dates','‚Äî')}\n"
            f"–ì–æ—Å—Ç–∏: {d.get('guests','‚Äî')}\n"
            f"–ö–æ–º–Ω–∞—Ç—ã: {d.get('rooms','‚Äî')}\n"
            f"‚≠êÔ∏è –ó–≤—ë–∑–¥–Ω–æ—Å—Ç—å: {d.get('stars','‚Äî')}\n"
            f"–ó–∞–≤—Ç—Ä–∞–∫: {d.get('breakfast','‚Äî')}\n"
            f"–õ–æ–∫–∞—Ü–∏—è: {d.get('location_pref','‚Äî')}\n"
            f"–ë—é–¥–∂–µ—Ç: {d.get('budget','‚Äî')}\n"
            "‚Äî ‚Äî ‚Äî –î–∞–Ω–Ω—ã–µ –≥–æ—Å—Ç—è ‚Äî ‚Äî ‚Äî\n"
            f"–§–ò–û (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π): {d.get('fullname','‚Äî')}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {d.get('dob','‚Äî')}\n"
            f"–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {d.get('citizenship','‚Äî')}\n"
            f"–ü–∞—Å–ø–æ—Ä—Ç ‚Ññ: {d.get('passport_no','‚Äî')}\n"
            f"–ü–∞—Å–ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤. –¥–æ: {d.get('passport_exp','‚Äî')}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {d.get('contact','‚Äî')}\n\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} (id {message.from_user.id})"
        )
    else:
        body = (
            "<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ TripBuddy</b> ‚úàÔ∏è\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {d.get('route','‚Äî')}\n"
            f"–î–∞—Ç—ã: {d.get('dates','‚Äî')}\n"
            f"–ö–ª–∞—Å—Å: {d.get('class','‚Äî')}\n"
            f"–ë–∞–≥–∞–∂: {d.get('baggage','‚Äî')}\n"
            f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏: {d.get('carriers','‚Äî')}\n"
            f"–ë—é–¥–∂–µ—Ç: {d.get('budget','‚Äî')}\n"
            "‚Äî ‚Äî ‚Äî –î–∞–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ ‚Äî ‚Äî ‚Äî\n"
            f"–§–ò–û (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π): {d.get('fullname','‚Äî')}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {d.get('dob','‚Äî')}\n"
            f"–ü–æ–ª: {d.get('gender','‚Äî')}\n"
            f"–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {d.get('citizenship','‚Äî')}\n"
            f"–ü–∞—Å–ø–æ—Ä—Ç ‚Ññ: {d.get('passport_no','‚Äî')}\n"
            f"–ü–∞—Å–ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤. –¥–æ: {d.get('passport_exp','‚Äî')}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {d.get('contact','‚Äî')}\n\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} (id {message.from_user.id})"
        )

    if ADMIN_GROUP_ID_INT is not None:
        try:
            admin_id = ADMIN_GROUP_ID_INT
            sent = bot.send_message(admin_id, body)
            photos = [fid for kind, fid in d.get("attachments", []) if kind == "photo"]
            docs   = [fid for kind, fid in d.get("attachments", []) if kind == "doc"]
            if photos:
                media = [types.InputMediaPhoto(fid) for fid in photos[:10]]
                bot.send_media_group(admin_id, media, reply_to_message_id=sent.message_id)
            for fid in docs:
                bot.send_document(admin_id, fid, reply_to_message_id=sent.message_id)
        except Exception as e:
            bot.send_message(cid, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É: {e}")

    bot.send_message(cid, "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è ü§ù", reply_markup=main_menu())

    # ‚úÖ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é ‚Äî —á—Ç–æ–±—ã –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –Ω–µ —É—à–ª–∞
    user_data.setdefault(cid, {})["submitted_request"] = True
    reset_flow(cid)

# ============ –û–ü–õ–ê–¢–ê ============

@bot.message_handler(commands=['whereami'])
def cmd_whereami(message: types.Message):
    step = user_step.get(message.chat.id)
    d = user_data.get(message.chat.id)
    bot.reply_to(message, f"–¢–µ–∫—É—â–∏–π —à–∞–≥: {step or '‚Äî'}\n–ö–ª—é—á–∏ user_data: {list(d.keys()) if d else '‚Äî'}")

@bot.message_handler(func=lambda m: m.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)")
def pay_start(message: types.Message):
    # —Å—Ç–∞—Ä—Ç –æ–ø–ª–∞—Ç—ã
    reset_flow(message.chat.id)
    user_data[message.chat.id] = {"pay_attachments": []}
    user_step[message.chat.id] = "pay_amount"
    bot.send_message(
        message.chat.id,
        "üí≥ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60000 RUB):",
        reply_markup=cancel_menu()
    )

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "pay_amount")
def pay_amount(message: types.Message):
    if (message.text or "") == "‚ùå –û—Ç–º–µ–Ω–∞":
        return cancel_flow(message)
    user_data[message.chat.id]["pay_amount_raw"] = (message.text or "").strip()
    user_step[message.chat.id] = "pay_date"
    bot.send_message(
        message.chat.id,
        "üìÖ –î–∞—Ç–∞/–≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 17.08.2025 15:40):",
        reply_markup=cancel_menu()
    )

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "pay_date")
def pay_date(message: types.Message):
    if (message.text or "") == "‚ùå –û—Ç–º–µ–Ω–∞":
        return cancel_flow(message)
    user_data[message.chat.id]["pay_date"] = (message.text or "").strip()
    user_step[message.chat.id] = "pay_method"
    bot.send_message(
        message.chat.id,
        "üè¶ –°–ø–æ—Å–æ–±: –¢-–ë–∞–Ω–∫ –ø–µ—Ä–µ–≤–æ–¥ / –¥—Ä—É–≥–æ–π –±–∞–Ω–∫ / –Ω–∞–ª–∏—á–Ω—ã–µ / –∏–Ω–æ–µ:",
        reply_markup=cancel_menu()
    )

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "pay_method")
def pay_method(message: types.Message):
    if (message.text or "") == "‚ùå –û—Ç–º–µ–Ω–∞":
        return cancel_flow(message)
    user_data[message.chat.id]["pay_method"] = (message.text or "").strip()
    user_step[message.chat.id] = "pay_attach"
    bot.send_message(
        message.chat.id,
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–≤–æ–¥–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ¬ª –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è¬ª.",
        reply_markup=pay_finish_menu()
    )

# –ü—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ/–¥–æ–∫) —É –≤–∞—Å –æ–±—â–∏–π ‚Äî –æ–Ω —É–∂–µ –∫–ª–∞–¥—ë—Ç –≤–æ "pay_attachments", –∫–æ–≥–¥–∞ step –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "pay_".
# –ó–¥–µ—Å—å –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–ª–∞—Ç—É.

@bot.message_handler(func=lambda m: user_step.get(m.chat.id) == "pay_attach")
def pay_finish(message: types.Message):
    t = (message.text or "").strip()

    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—É
    if t == "‚ùå –û—Ç–º–µ–Ω–∞":
        return cancel_flow(message)
    if t not in ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ"]:
        return bot.send_message(
            message.chat.id,
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª(—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ¬ª / ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è¬ª.",
            reply_markup=pay_finish_menu()
        )

    return _complete_payment(message)

# ¬´–°—Ç—Ä–∞—Ö–æ–≤–∫–∞¬ª: –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —à–∞–≥ –ø–æ—Ç–µ—Ä—è–ª—Å—è, –Ω–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ¬ª/¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è¬ª ‚Äî
# –ø–æ–ø—Ä–æ–±—É–µ–º –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É.
@bot.message_handler(func=lambda m: (m.text or "").strip() in ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ"])
def pay_finish_fallback(message: types.Message):
    step = user_step.get(message.chat.id)
    if step == "pay_attach":
        # –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—à–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—é–¥–∞ –Ω–µ –ø–æ–ø–∞–¥—ë–º
        return
    # –µ—Å–ª–∏ —à–∞–≥ –ø–æ—Ç–µ—Ä—è–Ω, –Ω–æ –≤ user_data –µ—Å—Ç—å —Å–ª–µ–¥—ã –æ–ø–ª–∞—Ç—ã ‚Äî –∑–∞–≤–µ—Ä—à–∏–º
    d = user_data.get(message.chat.id) or {}
    if any(k.startswith("pay_") for k in d.keys()):
        return _complete_payment(message)
    # –∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –ø—É—Å—Ç—å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç fallback –Ω–∏–∂–µ


def _complete_payment(message: types.Message):
    cid = message.chat.id
    d = user_data.get(cid, {})
    username = f"@{message.from_user.username}" if message.from_user.username else "‚Äî"

    # –ê–Ω—Ç–∏-–¥—É–±–ª–∏: –µ—Å–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–∞–ª–∏ –æ–ø–ª–∞—Ç—É –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ
    if d.get("_pay_done"):
        bot.send_message(cid, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=main_menu())
        return

    # –†–∞–∑–±–æ—Ä —Å—É–º–º—ã/–≤–∞–ª—é—Ç—ã
    amt, cur = parse_amount_currency(d.get("pay_amount_raw", ""))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    try:
        curc = _exec("""
            INSERT INTO payments (chat_id, amount, currency, pay_method, pay_date)
            VALUES (?, ?, ?, ?, ?)
        """, (cid, amt, cur, d.get("pay_method"), d.get("pay_date")))
        payment_id = curc.lastrowid

        for kind, fid in d.get("pay_attachments", []):
            _exec(
                "INSERT INTO payment_files (payment_id, kind, file_id) VALUES (?, ?, ?)",
                (payment_id, kind, fid)
            )
    except Exception as e:
        bot.send_message(cid, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤ –ë–î: {e}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
    body = (
        "<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ</b> ‚úÖ\n"
        f"–°—É–º–º–∞: {d.get('pay_amount_raw','‚Äî')}\n"
        f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {d.get('pay_date','‚Äî')}\n"
        f"–°–ø–æ—Å–æ–±: {d.get('pay_method','‚Äî')}\n\n"
        f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} (id {message.from_user.id})"
    )

    if ADMIN_GROUP_ID_INT is not None:
        try:
            admin_id = ADMIN_GROUP_ID_INT
            sent = bot.send_message(admin_id, body)
            photos = [fid for kind, fid in d.get("pay_attachments", []) if kind == "photo"]
            docs   = [fid for kind, fid in d.get("pay_attachments", []) if kind == "doc"]
            if photos:
                media = [types.InputMediaPhoto(fid) for fid in photos[:10]]
                bot.send_media_group(admin_id, media, reply_to_message_id=sent.message_id)
            for fid in docs:
                bot.send_document(admin_id, fid, reply_to_message_id=sent.message_id)
        except Exception as e:
            bot.send_message(cid, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É: {e}")

    d["_pay_done"] = True
    bot.send_message(
        cid,
        "–°–ø–∞—Å–∏–±–æ! –ü–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ. –ü—Ä–æ–≤–µ—Ä–∏–º –∏ –≤–µ—Ä–Ω—ë–º—Å—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º üôå",
        reply_markup=main_menu()
    )
    reset_flow(cid)


# ============ –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ============

def _norm_username(u: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username: —É–±–∏—Ä–∞–µ–º @ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É."""
    if not u:
        return ""
    return u.lstrip("@").lower()


def is_admin(message: types.Message) -> bool:
    """
    –ü—Ä–∞–≤–∏–ª–∞:
    1) –ï—Å–ª–∏ –∑–∞–¥–∞–Ω ADMIN_GROUP_ID_INT ‚Äî –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —Å—á–∏—Ç–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–º–∏.
    2) –ï—Å–ª–∏ –∑–∞–¥–∞–Ω ADMIN_USERNAME ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ username (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ @) —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.
    3) –ï—Å–ª–∏ –Ω–∏ ADMIN_GROUP_ID_INT –Ω–∏ ADMIN_USERNAME –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏).
    """
    # 1) –ß–∞—Ç-–∞–¥–º–∏–Ω–∫–∞
    if ADMIN_GROUP_ID_INT is not None and message.chat.id == ADMIN_GROUP_ID_INT:
        return True

    # 2) –Æ–∑–µ—Ä-–∞–¥–º–∏–Ω–∫–∞ –ø–æ username
    if ADMIN_USERNAME:
        my = _norm_username(message.from_user.username or "")
        adm = _norm_username(ADMIN_USERNAME)
        if my and adm and my == adm:
            return True

    # 3) –§–æ–ª–ª–±—ç–∫ (–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–¥–∞–Ω–æ) ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
    if ADMIN_GROUP_ID_INT is None and not ADMIN_USERNAME:
        return True

    return False


def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    def wrapper(message: types.Message):
        if not is_admin(message):
            return bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return func(message)
    return wrapper


# –ë—ã—Å—Ç—Ä—ã–π –ø–∏–Ω–≥ ‚Äî —É–¥–æ–±–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, ¬´–∂–∏–≤¬ª –ª–∏ —Ö—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['ping'])
def cmd_ping(message: types.Message):
    bot.reply_to(message, "pong")


# –ö–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM (–∞–Ω–∞–ª–æ–≥ /whereami)
@bot.message_handler(commands=['state'])
def cmd_state(message: types.Message):
    step = user_step.get(message.chat.id)
    d = user_data.get(message.chat.id)
    bot.reply_to(
        message,
        f"–¢–µ–∫—É—â–∏–π —à–∞–≥: {step or '‚Äî'}\n–ö–ª—é—á–∏ user_data: {list(d.keys()) if d else '‚Äî'}"
    )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
@bot.message_handler(commands=['iamadmin'])
def cmd_iamadmin(message: types.Message):
    ok = is_admin(message)
    who = f"@{message.from_user.username}" if message.from_user.username else f"id {message.from_user.id}"
    where = f"chat_id={message.chat.id}"
    bot.reply_to(
        message,
        f"is_admin={ok}\nwho={who}\nwhere={where}\n"
        f"ADMIN_USERNAME={ADMIN_USERNAME or '‚Äî'}\nADMIN_GROUP_ID_INT={ADMIN_GROUP_ID_INT}"
    )


# /migrate ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –ë–î (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞)
@bot.message_handler(commands=['migrate'])
@admin_only
def cmd_migrate(message: types.Message):
    try:
        add_missing_columns()
        bot.reply_to(message, "–ú–∏–≥—Ä–∞—Ü–∏—è: –æ–∫ ‚úÖ")
    except Exception as e:
        bot.reply_to(message, f"–ú–∏–≥—Ä–∞—Ü–∏—è: –æ—à–∏–±–∫–∞: {e}")


# /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(commands=['stats'])
@admin_only
def cmd_stats(message: types.Message):
    today = datetime.utcnow().date()
    start_today = f"{today} 00:00:00"
    start_week  = f"{(today - timedelta(days=6))} 00:00:00"

    c1 = _exec("SELECT COUNT(*) as c FROM requests WHERE datetime(created_at) >= datetime(?)", (start_today,)).fetchone()["c"]
    c2 = _exec("SELECT COUNT(*) as c FROM requests WHERE datetime(created_at) >= datetime(?)", (start_week,)).fetchone()["c"]

    p1 = _exec("SELECT COUNT(*) as c FROM payments WHERE datetime(created_at) >= datetime(?)", (start_today,)).fetchone()["c"]
    p2 = _exec("SELECT COUNT(*) as c FROM payments WHERE datetime(created_at) >= datetime(?)", (start_week,)).fetchone()["c"]

    rows = _exec("SELECT amount, currency FROM payments WHERE datetime(created_at) >= datetime(?)", (start_week,)).fetchall()
    sums = {}
    for r in rows:
        cur = (r["currency"] or "").upper() or "RUB"
        sums.setdefault(cur, 0.0)
        try:
            sums[cur] += float((r["amount"] or "0").replace(",", "."))
        except:
            pass
    sums_str = ", ".join([f"{round(v,2)} {k}" for k, v in sums.items()]) if sums else "‚Äî"

    bot.reply_to(message,
        "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"–ó–∞—è–≤–æ–∫: —Å–µ–≥–æ–¥–Ω—è {c1} / –∑–∞ 7 –¥–Ω–µ–π {c2}\n"
        f"–û–ø–ª–∞—Ç: —Å–µ–≥–æ–¥–Ω—è {p1} / –∑–∞ 7 –¥–Ω–µ–π {p2}\n"
        f"–°—É–º–º–∞ (7–¥): {sums_str}"
    )


# /export_csv ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü
@bot.message_handler(commands=['export_csv'])
@admin_only
def cmd_export_csv(message: types.Message):
    try:
        # requests.csv
        req_rows = _exec("""
            SELECT id, chat_id, type, route, dates, guests, rooms, stars, breakfast, location_pref, budget,
                   class, baggage, carriers, fullname, dob, gender, citizenship, passport_no, passport_exp, contact, created_at
            FROM requests ORDER BY id DESC
        """).fetchall()
        with open("requests.csv", "w", newline="", encoding="utf-8") as f:
            w = csv.writer(f, delimiter=";")
            w.writerow([c for c in req_rows[0].keys()] if req_rows else
                       ["id","chat_id","type","route","dates","guests","rooms","stars","breakfast","location_pref","budget",
                        "class","baggage","carriers","fullname","dob","gender","citizenship","passport_no","passport_exp","contact","created_at"])
            for r in req_rows:
                w.writerow([r[k] for k in r.keys()])
        with open("requests.csv", "rb") as f:
            bot.send_document(message.chat.id, f, visible_file_name="requests.csv")

        # payments.csv
        pay_rows = _exec("""
            SELECT id, chat_id, amount, currency, pay_method, pay_date, created_at
            FROM payments ORDER BY id DESC
        """).fetchall()
        with open("payments.csv", "w", newline="", encoding="utf-8") as f:
            w = csv.writer(f, delimiter=";")
            w.writerow([c for c in pay_rows[0].keys()] if pay_rows else
                       ["id","chat_id","amount","currency","pay_method","pay_date","created_at"])
            for r in pay_rows:
                w.writerow([r[k] for k in r.keys()])
        with open("payments.csv", "rb") as f:
            bot.send_document(message.chat.id, f, visible_file_name="payments.csv")

        # payment_files.csv
        pfiles = _exec("""
            SELECT pf.id, pf.payment_id, p.chat_id, pf.kind, pf.file_id, p.created_at
            FROM payment_files pf
            LEFT JOIN payments p ON p.id = pf.payment_id
            ORDER BY pf.id DESC
        """).fetchall()
        with open("payment_files.csv", "w", newline="", encoding="utf-8") as f:
            w = csv.writer(f, delimiter=";")
            w.writerow([c for c in pfiles[0].keys()] if pfiles else
                       ["id","payment_id","chat_id","kind","file_id","created_at"])
            for r in pfiles:
                w.writerow([r[k] for k in r.keys()])
        with open("payment_files.csv", "rb") as f:
            bot.send_document(message.chat.id, f, visible_file_name="payment_files.csv")

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


# /find <chat_id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –ø–æ chat_id
@bot.message_handler(commands=['find'])
@admin_only
def cmd_find(message: types.Message):
    parts = message.text.split(maxsplit=1)
    chat_id = None
    if len(parts) == 2 and parts[1].strip():
        arg = parts[1].strip()
        if arg.lstrip("-").isdigit():
            try:
                chat_id = int(arg)
            except:
                pass
    if chat_id is None and message.reply_to_message:
        m = re.search(r"id (\-?\d+)\)", message.reply_to_message.text or "")
        if m:
            chat_id = int(m.group(1))
    if chat_id is None:
        return bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ chat_id —á–∏—Å–ª–æ–º –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏.")

    row = _exec("SELECT * FROM requests WHERE chat_id=? ORDER BY id DESC LIMIT 1", (chat_id,)).fetchone()
    if not row:
        return bot.reply_to(message, "–ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    text = (
        "<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞</b>\n"
        f"chat_id: {row['chat_id']}\n"
        f"–¢–∏–ø: {row['type']}\n"
        f"–ú–∞—Ä—à—Ä—É—Ç/–ì–æ—Ä–æ–¥: {row['route']}\n"
        f"–î–∞—Ç—ã: {row['dates']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {row['contact']}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {row['created_at']}"
    )
    bot.reply_to(message, text)


# /invoice ‚Äî –≥–∏–±–∫–∏–π –ø–∞—Ä—Å–µ—Ä:
# 1) /invoice <chat_id> <base> [currency] [fee] [note...]
# 2) (reply –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏) /invoice <base> [currency] [fee] [note...]
@bot.message_handler(commands=['invoice'])
@admin_only
def cmd_invoice(message: types.Message):
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã/–Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    def _norm_num_token(s: str) -> str:
        if not s:
            return ""
        s = s.replace("\u00A0", " ")  # NBSP -> space
        s = s.replace(" ", "")
        s = s.replace(",", ".")
        return s

    def _is_number_token(s: str) -> bool:
        s = _norm_num_token(s)
        return bool(re.fullmatch(r"-?\d+(\.\d+)?", s))

    def _to_float(s: str) -> float:
        return float(_norm_num_token(s))

    tokens = message.text.split()[1:]  # –±–µ–∑ —Å–∞–º–æ–≥–æ "/invoice"
    if not tokens:
        return bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /invoice <chat_id> <base> [currency] [fee] [note...] –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É: /invoice <base> [currency] [fee] [note]")

    chat_id = None
    base_tok = None
    currency = "RUB"
    fee_tok = None
    note_parts = []

    # 1) –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω ‚Äî chat_id (—á–∏—Å–ª–æ, –≤ —Ç.—á. –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø)
    i = 0
    if tokens and re.fullmatch(r"-?\d+", tokens[0]):
        chat_id = int(tokens[0])
        i = 1  # –¥–∞–ª—å—à–µ –ø–∞—Ä—Å–∏–º —Å—É–º–º—É/–≤–∞–ª—é—Ç—É/fee/–Ω–æ—Ç—É
    # –∏–Ω–∞—á–µ —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ reply ‚Äî chat_id –≤–æ–∑—å–º—ë–º –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∏–∂–µ

    # 2) –ü—Ä–æ—Ö–æ–¥–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—è–≤–ª–µ–Ω–∏—è:
    #    –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ -> base; –æ–¥–Ω–∞ –∏–∑ –≤–∞–ª—é—Ç -> currency; —Å–ª–µ–¥—É—é—â–∞—è —Ü–∏—Ñ—Ä–∞ -> fee; –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ -> note
    while i < len(tokens):
        t = tokens[i]
        up = t.upper()

        if base_tok is None and _is_number_token(t):
            base_tok = t
        elif up in ["RUB", "USD", "EUR", "GEL"]:
            currency = up
        elif fee_tok is None and _is_number_token(t):
            fee_tok = t
        else:
            note_parts.append(t)
        i += 1

    # 3) –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ‚Äî –ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –µ–≥–æ –∏–∑ reply –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
    if chat_id is None:
        if not message.reply_to_message:
            return bot.reply_to(message, "–õ–∏–±–æ —É–∫–∞–∂–∏: /invoice <chat_id> <base> [currency] [fee] [note], –ª–∏–±–æ –æ—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏.")
        m = re.search(r"id (\-?\d+)\)", message.reply_to_message.text or "")
        if not m:
            return bot.reply_to(message, "–ù–µ –Ω–∞—à–ª–∞ user_id –≤ –∫–∞—Ä—Ç–æ—á–∫–µ. –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /invoice –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏.")
        chat_id = int(m.group(1))

    # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –±–∞–∑–æ–≤–∞—è —Å—É–º–º–∞
    if not base_tok or not _is_number_token(base_tok):
        return bot.reply_to(message, "–°—É–º–º–∞ base –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü—Ä–∏–º–µ—Ä: 65000 –∏–ª–∏ 65000.00")

    # 5) –ß–∏—Å–ª–∞ -> float, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é fee = 0
    try:
        base = _to_float(base_tok)
    except:
        return bot.reply_to(message, "–°—É–º–º–∞ base –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü—Ä–∏–º–µ—Ä: 65000 –∏–ª–∏ 65000.00")
    fee = 0.0
    if fee_tok and _is_number_token(fee_tok):
        try:
            fee = _to_float(fee_tok)
        except:
            fee = 0.0

    note = " ".join(note_parts).strip()

    # 6) –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
    total = int(round(base + fee)) if currency in ["RUB", "GEL"] else round(base + fee, 2)
    text = ("üßæ <b>–ò–Ω–≤–æ–π—Å</b>\n" + (f"{note}\n\n" if note else "\n")) + PAYMENT_INSTRUCTIONS.format(
        base=int(base) if currency in ["RUB","GEL"] else base,
        fee=int(fee) if currency in ["RUB","GEL"] else fee,
        total=total,
        currency=currency
    )
    try:
        bot.send_message(chat_id, text, parse_mode="HTML")
        bot.send_message(
            chat_id,
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫.",
            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)")
        )
        bot.reply_to(message, f"–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É: {total} {currency}.")
    except Exception as e:
        bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–æ–π—Å: {e}")


# /confirmpaid <chat_id>  –ò–õ–ò reply –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –æ–ø–ª–∞—Ç—ã
@bot.message_handler(commands=['confirmpaid'])
@admin_only
def cmd_confirmpaid(message: types.Message):
    parts = message.text.split(maxsplit=1)
    user_id = None
    if len(parts) == 2 and parts[1].lstrip("-").isdigit():
        user_id = int(parts[1])
    elif message.reply_to_message:
        m = re.search(r"id (\-?\d+)\)", message.reply_to_message.text or "")
        if m:
            user_id = int(m.group(1))
    if user_id is None:
        return bot.reply_to(message, "–£–∫–∞–∂–∏: /confirmpaid <chat_id> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –æ–ø–ª–∞—Ç—ã/–∑–∞—è–≤–∫–∏.")
    try:
        bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! –ü—Ä–∏—à–ª—ë–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –±—Ä–æ–Ω–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        bot.reply_to(message, "–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.")
    except Exception as e:
        bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É: {e}")


# /pm <user_id> <—Ç–µ–∫—Å—Ç> ‚Äî –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['pm'])
@admin_only
def cmd_pm(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return bot.reply_to(message, "–ü—Ä–∏–º–µ—Ä: /pm 123456789 –ü—Ä–∏–≤–µ—Ç! –ú—ã –≥–æ—Ç–æ–≤—ã –∫ –±—Ä–æ–Ω–∏.")
    try:
        user_id = int(parts[1])
    except:
        return bot.reply_to(message, "user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    text = parts[2]
    try:
        bot.send_message(user_id, text, parse_mode="HTML")
        bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∏–µ–Ω—Ç—É.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


# /senddoc <user_id> ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º/—Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ
@bot.message_handler(commands=['senddoc'])
@admin_only
def cmd_senddoc(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return bot.reply_to(message, "–ü—Ä–∏–º–µ—Ä: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å PDF/—Ñ–æ—Ç–æ –∏ –≤–≤–µ–¥–∏—Ç–µ /senddoc 123456789")
    try:
        user_id = int(parts[1])
    except:
        return bot.reply_to(message, "user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    if not message.reply_to_message:
        return bot.reply_to(message, "–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º.")
    rm = message.reply_to_message
    try:
        if rm.document:
            bot.send_document(user_id, rm.document.file_id, caption=rm.caption or "")
        elif rm.photo:
            bot.send_photo(user_id, rm.photo[-1].file_id, caption=rm.caption or "")
        else:
            return bot.reply_to(message, "–í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ.")
        bot.reply_to(message, "–í–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")
    except Exception as e:
        bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")


# ============ Fallback (–ø–æ—Å–ª–µ–¥–Ω–∏–º!) ============
@bot.message_handler(func=lambda m: m.content_type == 'text' and not ((m.text or "").startswith("/")))
def fallback(message: types.Message):
    bot.send_message(
        message.chat.id,
        "–ü–æ–∫–∞ –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å üòÖ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )

# ============ –ó–ê–ü–£–°–ö ============
PUBLIC_URL = os.getenv("PUBLIC_URL", "").strip()
PORT = int(os.getenv("PORT", "8080"))  # –í –ø—Ä–æ–¥–µ Replit –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç PORT, –ª–æ–∫–∞–ª—å–Ω–æ –¥–µ—Ñ–æ–ª—Ç 8080

if PUBLIC_URL:
    # ---- –ü–†–û–î / DEPLOY: —Ä–µ–∂–∏–º WEBHOOK ----
    print(f"Starting in WEBHOOK mode. PUBLIC_URL={PUBLIC_URL}")
    try:
        bot.remove_webhook()
    except Exception as e:
        print(f"remove_webhook error (ok to ignore): {e}")

    webhook_url = f"{PUBLIC_URL}/webhook/{BOT_TOKEN}"
    ok = bot.set_webhook(url=webhook_url, drop_pending_updates=True)
    print(f"Webhook set to {webhook_url}: {ok}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask ‚Äî –Ω–∞ –ø–æ—Ä—Ç PORT (–≤ Replit —ç—Ç–æ 8080)
    app.run(host="0.0.0.0", port=PORT, debug=False, use_reloader=False)

else:
    # ---- –õ–û–ö–ê–õ–¨–ù–û / WORKSPACE: —Ä–µ–∂–∏–º POLLING + –º–∏–Ω–∏-Flask (–¥–ª—è health-check) ----
    print("Starting in POLLING mode (no PUBLIC_URL).")
    try:
        bot.remove_webhook()
    except Exception as e:
        print(f"remove_webhook error (ok to ignore): {e}")

    # –ü–æ–¥–Ω–∏–º–µ–º Flask –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã / health-check —Ä–∞–±–æ—Ç–∞–ª –∏ –ª–æ–∫–∞–ª—å–Ω–æ
    def _run_web_bg():
        app.run(host="0.0.0.0", port=PORT, debug=False, use_reloader=False)
    Thread(target=_run_web_bg, daemon=True).start()

    # –ò –∑–∞–ø—É—Å—Ç–∏–º long polling
    bot.infinity_polling(skip_pending=True, timeout=30, long_polling_timeout=30)

